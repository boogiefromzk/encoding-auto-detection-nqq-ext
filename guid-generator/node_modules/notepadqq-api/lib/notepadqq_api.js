/// <reference path="types/node.d.ts" />
var DataChannel = require("./data_channel");
var MessageInterpreter = require("./message_interpreter");
var Stubs = require("./stubs");
var NotepadqqApi = (function () {
    function NotepadqqApi(socketPath, extensionId) {
        if (socketPath === void 0) { socketPath = null; }
        if (extensionId === void 0) { extensionId = null; }
        if (socketPath === null) {
            if (process.argv[2] !== undefined)
                socketPath = process.argv[2];
            else
                throw "Socket path not provided";
        }
        if (extensionId === null) {
            if (process.argv[3] !== undefined)
                extensionId = process.argv[3];
            else
                throw "Extension id not provided";
        }
        this._socketPath = socketPath;
        this._extensionId = extensionId;
        this._dataChannel = new DataChannel(this._socketPath, this._onNewMessage.bind(this));
        this._messageInterpreter = new MessageInterpreter(this._dataChannel);
        this._nqq = new Stubs.Notepadqq(this._messageInterpreter, NotepadqqApi.NQQ_STUB_ID);
    }
    Object.defineProperty(NotepadqqApi, "NQQ_STUB_ID", {
        get: function () { return 1; },
        enumerable: true,
        configurable: true
    });
    NotepadqqApi.prototype.onWindowInitialization = function (callback) {
        var capturedWindows = [];
        // Invoke the callback for every currently open window
        var curWindows = this.notepadqq.windows();
        for (var i = 0; i < curWindows.length; i++) {
            if (!this._stubIsInArray(capturedWindows, curWindows[i])) {
                capturedWindows.push(curWindows[i]);
                callback(curWindows[i]);
            }
        }
        // Each time a new window gets opened, invoke the callback.
        // When Notepadqq is starting and initializing all the extensions,
        // we might not be fast enough to receive this event: this is why
        // we manually invoked the callback for every currently open window.
        this.notepadqq.on("newWindow", function (window) {
            if (!this._stubIsInArray(capturedWindows, window)) {
                callback(window);
            }
        }.bind(this));
    };
    Object.defineProperty(NotepadqqApi.prototype, "extensionId", {
        get: function () {
            return this._extensionId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NotepadqqApi.prototype, "notepadqq", {
        get: function () {
            return this._nqq;
        },
        enumerable: true,
        configurable: true
    });
    NotepadqqApi.prototype._onNewMessage = function (message) {
        this._messageInterpreter.processMessage(message);
    };
    NotepadqqApi.prototype._stubIsInArray = function (array, stub) {
        for (var i = 0; i < array.length; i++) {
            if (stub.equals(array[i]))
                return true;
        }
        return false;
    };
    return NotepadqqApi;
})();
module.exports = NotepadqqApi;
//# sourceMappingURL=notepadqq_api.js.map